// 用户输入的信息（实际使用时替换为真实输入）
const inputEmail = "user@example.com";       // 输入的邮箱
const inputIdcode = "old_Mima_123";        // 输入的原始Mima（用于验证）
const inputName = "张三";                    // 输入的姓名
const newIdcode = "new_Mima_456";          // 新的Mima（如果不需要更新可设为null或空字符串）

// 直接执行验证和更新逻辑
(async () => {
    console.log("开始验证用户信息...");
    
    // 调用validateUser进行验证
    const isValid = await validateUser(inputEmail, inputIdcode, inputName);
    
    if (isValid) {
        console.log("用户信息验证成功");
        
        // 检查是否提供了新的Mima
        if (newIdcode) {
            console.log("检测到新的Mima，准备执行更新...");
            
            // 查询对应的用户
            const userQuery = new AV.Query('_User');
            userQuery.equalTo('email', inputEmail);
            
            try {
                const users = await userQuery.find();
                
                if (users.length > 0) {
                    const user = users[0];
                    // 保存旧Mima用于日志
                    const oldIdcode = user.get('Mima');
                    
                    // 更新Mima字段
                    user.set('Mima', newIdcode);
                    await user.save();
                    
                    console.log("Mima更新成功！");
                    console.log(`用户邮箱: ${inputEmail}`);
                    console.log(`旧Mima: ${oldIdcode}`);
                    console.log(`新Mima: ${newIdcode}`);
                } else {
                    console.log("验证成功但未找到对应的用户记录，无法更新");
                }
            } catch (error) {
                console.error("更新Mima时发生错误:", error.message);
            }
        } else {
            console.log("未提供新的Mima，不执行更新操作");
        }
    } else {
        console.log("用户信息验证失败，不执行任何更新操作");
    }
})();